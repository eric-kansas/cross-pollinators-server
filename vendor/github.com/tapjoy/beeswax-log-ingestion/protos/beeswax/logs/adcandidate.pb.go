// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/logs/adcandidate.proto

package logs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Bidding agents can implement flexible bidding strategies.
// A bidding strategy consists of attributes that are used by the bidding agent
// at run time to compute the bid.
// CPM, CPC and custom bidding strategies are currently available.
//
// All price information is represented as micros which is the actual value
// multiplied by 1 million i.e. 10e+6.
// The currency used for all fields is specified in the `currency` field,
// which is set per campaign in buzz.
//
// Next Tag: 6
type Bidding struct {
	// Only one of the strategies will be present.
	CpmStrategy    *Bidding_CpmStrategy    `protobuf:"bytes,1,opt,name=cpm_strategy,json=cpmStrategy" json:"cpm_strategy,omitempty"`
	CpcStrategy    *Bidding_CpcStrategy    `protobuf:"bytes,2,opt,name=cpc_strategy,json=cpcStrategy" json:"cpc_strategy,omitempty"`
	CustomStrategy *Bidding_CustomStrategy `protobuf:"bytes,4,opt,name=custom_strategy,json=customStrategy" json:"custom_strategy,omitempty"`
	Currency       *Currency_Code          `protobuf:"varint,5,opt,name=currency,enum=logs.Currency_Code" json:"currency,omitempty"`
	// The following fields are for internal use by the bidding agents and
	// will not be set in the request or response.
	BidPriceMicros   *uint64 `protobuf:"varint,3,opt,name=bid_price_micros,json=bidPriceMicros" json:"bid_price_micros,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Bidding) Reset()                    { *m = Bidding{} }
func (m *Bidding) String() string            { return proto.CompactTextString(m) }
func (*Bidding) ProtoMessage()               {}
func (*Bidding) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Bidding) GetCpmStrategy() *Bidding_CpmStrategy {
	if m != nil {
		return m.CpmStrategy
	}
	return nil
}

func (m *Bidding) GetCpcStrategy() *Bidding_CpcStrategy {
	if m != nil {
		return m.CpcStrategy
	}
	return nil
}

func (m *Bidding) GetCustomStrategy() *Bidding_CustomStrategy {
	if m != nil {
		return m.CustomStrategy
	}
	return nil
}

func (m *Bidding) GetCurrency() Currency_Code {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return Currency_UNKNOWN
}

func (m *Bidding) GetBidPriceMicros() uint64 {
	if m != nil && m.BidPriceMicros != nil {
		return *m.BidPriceMicros
	}
	return 0
}

// CPM: Always bid a flat price on all matched requests.
type Bidding_CpmStrategy struct {
	FlatBidMicros    *uint64 `protobuf:"varint,1,opt,name=flat_bid_micros,json=flatBidMicros" json:"flat_bid_micros,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Bidding_CpmStrategy) Reset()                    { *m = Bidding_CpmStrategy{} }
func (m *Bidding_CpmStrategy) String() string            { return proto.CompactTextString(m) }
func (*Bidding_CpmStrategy) ProtoMessage()               {}
func (*Bidding_CpmStrategy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Bidding_CpmStrategy) GetFlatBidMicros() uint64 {
	if m != nil && m.FlatBidMicros != nil {
		return *m.FlatBidMicros
	}
	return 0
}

// CPC: Optimize towards a cost per click goal.
type Bidding_CpcStrategy struct {
	MaxBidMicros     *uint64 `protobuf:"varint,1,opt,name=max_bid_micros,json=maxBidMicros" json:"max_bid_micros,omitempty"`
	EcpcTargetMicros *uint64 `protobuf:"varint,2,opt,name=ecpc_target_micros,json=ecpcTargetMicros" json:"ecpc_target_micros,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Bidding_CpcStrategy) Reset()                    { *m = Bidding_CpcStrategy{} }
func (m *Bidding_CpcStrategy) String() string            { return proto.CompactTextString(m) }
func (*Bidding_CpcStrategy) ProtoMessage()               {}
func (*Bidding_CpcStrategy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *Bidding_CpcStrategy) GetMaxBidMicros() uint64 {
	if m != nil && m.MaxBidMicros != nil {
		return *m.MaxBidMicros
	}
	return 0
}

func (m *Bidding_CpcStrategy) GetEcpcTargetMicros() uint64 {
	if m != nil && m.EcpcTargetMicros != nil {
		return *m.EcpcTargetMicros
	}
	return 0
}

// Custom strategy is defined using Buzz API.
// Customers can define many different strategies and identify them using
// a name.
// Further, customers can associate multiple key, values with a strategy
// that are made available in the matching Adcandidate.
// Customers can use the key,values to implement their own optimization.
type Bidding_CustomStrategy struct {
	Name             *string                          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CustomParams     []*Bidding_CustomStrategy_Params `protobuf:"bytes,2,rep,name=custom_params,json=customParams" json:"custom_params,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *Bidding_CustomStrategy) Reset()                    { *m = Bidding_CustomStrategy{} }
func (m *Bidding_CustomStrategy) String() string            { return proto.CompactTextString(m) }
func (*Bidding_CustomStrategy) ProtoMessage()               {}
func (*Bidding_CustomStrategy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

func (m *Bidding_CustomStrategy) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Bidding_CustomStrategy) GetCustomParams() []*Bidding_CustomStrategy_Params {
	if m != nil {
		return m.CustomParams
	}
	return nil
}

type Bidding_CustomStrategy_Params struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Bidding_CustomStrategy_Params) Reset()         { *m = Bidding_CustomStrategy_Params{} }
func (m *Bidding_CustomStrategy_Params) String() string { return proto.CompactTextString(m) }
func (*Bidding_CustomStrategy_Params) ProtoMessage()    {}
func (*Bidding_CustomStrategy_Params) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 2, 0}
}

func (m *Bidding_CustomStrategy_Params) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Bidding_CustomStrategy_Params) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Pacing determines the rate of spend of the budget for a line item.
// When pace_delivery is set to true, the bidding agent is expected to pace
// the spend of the line item uniformly over its life time.
//
// Next Tag: 2
type Pacing struct {
	PaceDelivery     *bool  `protobuf:"varint,1,opt,name=pace_delivery,json=paceDelivery,def=0" json:"pace_delivery,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Pacing) Reset()                    { *m = Pacing{} }
func (m *Pacing) String() string            { return proto.CompactTextString(m) }
func (*Pacing) ProtoMessage()               {}
func (*Pacing) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

const Default_Pacing_PaceDelivery bool = false

func (m *Pacing) GetPaceDelivery() bool {
	if m != nil && m.PaceDelivery != nil {
		return *m.PaceDelivery
	}
	return Default_Pacing_PaceDelivery
}

// FrequencyCapsInfo contains the information of a lineitem/campaign's
// frequency cap constraints and the user's impression history.
// The bidding agent will not receive adcandidates which are not
// eligible to bid when any of the lineitem/campaingn's frequency cap's
// limit is hit.
//
// Next Id: 4
type FrequencyCapsInfo struct {
	FrequencyCap  []*FrequencyCapsInfo_FrequencyCap `protobuf:"bytes,1,rep,name=frequency_cap,json=frequencyCap" json:"frequency_cap,omitempty"`
	ImpTimestamps []uint32                          `protobuf:"varint,2,rep,name=imp_timestamps,json=impTimestamps" json:"imp_timestamps,omitempty"`
	// The last rx timestamp in seconds when the ad was served for the
	// line_item/campaign and user combination in the past 30 days. It is
	// updated real-time per request. It will not be populated if the
	// line_item/campaign does not have any impression for the user in the past
	// 30 days.
	LastImpTimestamp *uint32 `protobuf:"varint,3,opt,name=last_imp_timestamp,json=lastImpTimestamp" json:"last_imp_timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FrequencyCapsInfo) Reset()                    { *m = FrequencyCapsInfo{} }
func (m *FrequencyCapsInfo) String() string            { return proto.CompactTextString(m) }
func (*FrequencyCapsInfo) ProtoMessage()               {}
func (*FrequencyCapsInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FrequencyCapsInfo) GetFrequencyCap() []*FrequencyCapsInfo_FrequencyCap {
	if m != nil {
		return m.FrequencyCap
	}
	return nil
}

func (m *FrequencyCapsInfo) GetImpTimestamps() []uint32 {
	if m != nil {
		return m.ImpTimestamps
	}
	return nil
}

func (m *FrequencyCapsInfo) GetLastImpTimestamp() uint32 {
	if m != nil && m.LastImpTimestamp != nil {
		return *m.LastImpTimestamp
	}
	return 0
}

// FrequencyCap contains the frequency constraints for a given user to not
// view the ad more than `max_impressions` times within a duration of
// `duration_seconds`, and the actual impression counts within the duration
// for the user as in `current_impression_count`.
// `max_impressions` and `duration_seconds` are defined using Buzz API, and
// `current_impression_count` is populated real-time per request.
// E.g. If a line item specifies hourly frequency cap
// constraints of 10 impression/user, and it has had impressions for the
// past hour, the value will be
// {max_impressions = 10, duration_secs = 3600, current_impression_count = 2}.
//
//
// Next Id: 4
type FrequencyCapsInfo_FrequencyCap struct {
	// Allowed number of impressions in the duration .
	MaxImpressions *uint32 `protobuf:"varint,1,opt,name=max_impressions,json=maxImpressions" json:"max_impressions,omitempty"`
	// The duration (in second) in which max_impressions should not be exceeded.
	DurationSeconds *uint32 `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	// Actual impression numbers served in the duration.
	CurrentImpressionCount *uint32 `protobuf:"varint,3,opt,name=current_impression_count,json=currentImpressionCount" json:"current_impression_count,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *FrequencyCapsInfo_FrequencyCap) Reset()         { *m = FrequencyCapsInfo_FrequencyCap{} }
func (m *FrequencyCapsInfo_FrequencyCap) String() string { return proto.CompactTextString(m) }
func (*FrequencyCapsInfo_FrequencyCap) ProtoMessage()    {}
func (*FrequencyCapsInfo_FrequencyCap) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

func (m *FrequencyCapsInfo_FrequencyCap) GetMaxImpressions() uint32 {
	if m != nil && m.MaxImpressions != nil {
		return *m.MaxImpressions
	}
	return 0
}

func (m *FrequencyCapsInfo_FrequencyCap) GetDurationSeconds() uint32 {
	if m != nil && m.DurationSeconds != nil {
		return *m.DurationSeconds
	}
	return 0
}

func (m *FrequencyCapsInfo_FrequencyCap) GetCurrentImpressionCount() uint32 {
	if m != nil && m.CurrentImpressionCount != nil {
		return *m.CurrentImpressionCount
	}
	return 0
}

// Adcandidate represents an eligible line item and its attributes.
// Stinger determines the eligible line items for a given request.
//
// Next Tag: 12
type Adcandidate struct {
	LineItemId            *uint64  `protobuf:"varint,1,opt,name=line_item_id,json=lineItemId" json:"line_item_id,omitempty"`
	CampaignId            *uint64  `protobuf:"varint,5,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	AccountId             *uint64  `protobuf:"varint,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AdvertiserId          *uint64  `protobuf:"varint,8,opt,name=advertiser_id,json=advertiserId" json:"advertiser_id,omitempty"`
	LineItemAlternativeId *string  `protobuf:"bytes,9,opt,name=line_item_alternative_id,json=lineItemAlternativeId" json:"line_item_alternative_id,omitempty"`
	BuzzKey               *string  `protobuf:"bytes,7,opt,name=buzz_key,json=buzzKey" json:"buzz_key,omitempty"`
	CreativeIds           []uint64 `protobuf:"varint,2,rep,name=creative_ids,json=creativeIds" json:"creative_ids,omitempty"`
	Bidding               *Bidding `protobuf:"bytes,3,opt,name=bidding" json:"bidding,omitempty"`
	Pacing                *Pacing  `protobuf:"bytes,4,opt,name=pacing" json:"pacing,omitempty"`
	// This field wil be empty if the line_item does not have any frequency
	// cap associated with it.
	LineItemFrequencyCapsInfo *FrequencyCapsInfo `protobuf:"bytes,10,opt,name=line_item_frequency_caps_info,json=lineItemFrequencyCapsInfo" json:"line_item_frequency_caps_info,omitempty"`
	// This field wil be empty if the campaign does not have any frequency
	// cap associated with it.
	CampaignFrequencyCapsInfo *FrequencyCapsInfo `protobuf:"bytes,11,opt,name=campaign_frequency_caps_info,json=campaignFrequencyCapsInfo" json:"campaign_frequency_caps_info,omitempty"`
	XXX_unrecognized          []byte             `json:"-"`
}

func (m *Adcandidate) Reset()                    { *m = Adcandidate{} }
func (m *Adcandidate) String() string            { return proto.CompactTextString(m) }
func (*Adcandidate) ProtoMessage()               {}
func (*Adcandidate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Adcandidate) GetLineItemId() uint64 {
	if m != nil && m.LineItemId != nil {
		return *m.LineItemId
	}
	return 0
}

func (m *Adcandidate) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *Adcandidate) GetAccountId() uint64 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *Adcandidate) GetAdvertiserId() uint64 {
	if m != nil && m.AdvertiserId != nil {
		return *m.AdvertiserId
	}
	return 0
}

func (m *Adcandidate) GetLineItemAlternativeId() string {
	if m != nil && m.LineItemAlternativeId != nil {
		return *m.LineItemAlternativeId
	}
	return ""
}

func (m *Adcandidate) GetBuzzKey() string {
	if m != nil && m.BuzzKey != nil {
		return *m.BuzzKey
	}
	return ""
}

func (m *Adcandidate) GetCreativeIds() []uint64 {
	if m != nil {
		return m.CreativeIds
	}
	return nil
}

func (m *Adcandidate) GetBidding() *Bidding {
	if m != nil {
		return m.Bidding
	}
	return nil
}

func (m *Adcandidate) GetPacing() *Pacing {
	if m != nil {
		return m.Pacing
	}
	return nil
}

func (m *Adcandidate) GetLineItemFrequencyCapsInfo() *FrequencyCapsInfo {
	if m != nil {
		return m.LineItemFrequencyCapsInfo
	}
	return nil
}

func (m *Adcandidate) GetCampaignFrequencyCapsInfo() *FrequencyCapsInfo {
	if m != nil {
		return m.CampaignFrequencyCapsInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Bidding)(nil), "logs.Bidding")
	proto.RegisterType((*Bidding_CpmStrategy)(nil), "logs.Bidding.CpmStrategy")
	proto.RegisterType((*Bidding_CpcStrategy)(nil), "logs.Bidding.CpcStrategy")
	proto.RegisterType((*Bidding_CustomStrategy)(nil), "logs.Bidding.CustomStrategy")
	proto.RegisterType((*Bidding_CustomStrategy_Params)(nil), "logs.Bidding.CustomStrategy.Params")
	proto.RegisterType((*Pacing)(nil), "logs.Pacing")
	proto.RegisterType((*FrequencyCapsInfo)(nil), "logs.FrequencyCapsInfo")
	proto.RegisterType((*FrequencyCapsInfo_FrequencyCap)(nil), "logs.FrequencyCapsInfo.FrequencyCap")
	proto.RegisterType((*Adcandidate)(nil), "logs.Adcandidate")
}

func init() { proto.RegisterFile("beeswax/logs/adcandidate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x55, 0xdd, 0x8e, 0xe3, 0x34,
	0x14, 0x56, 0x3a, 0xed, 0xb4, 0x3d, 0x49, 0xda, 0xae, 0xf9, 0xcb, 0x94, 0x5d, 0x28, 0xdd, 0x11,
	0xdb, 0x45, 0xa8, 0x83, 0x2a, 0x10, 0x08, 0x71, 0xb3, 0x2d, 0x20, 0x22, 0x84, 0xb4, 0xf2, 0xee,
	0x05, 0x5c, 0x45, 0xae, 0xed, 0x56, 0x16, 0x71, 0x12, 0x1c, 0xb7, 0x4c, 0xf7, 0x25, 0x78, 0x01,
	0x2e, 0x78, 0x2a, 0x9e, 0x80, 0x07, 0x41, 0xb6, 0x93, 0xa6, 0xa5, 0x0b, 0xdc, 0xe5, 0x7c, 0x3f,
	0xc7, 0x3e, 0x3e, 0xdf, 0x74, 0xe0, 0xbd, 0x35, 0xe7, 0xe5, 0xaf, 0xe4, 0xfe, 0x2e, 0xcd, 0xb7,
	0xe5, 0x1d, 0x61, 0x94, 0x64, 0x4c, 0x30, 0xa2, 0xf9, 0xbc, 0x50, 0xb9, 0xce, 0x51, 0xdb, 0xe0,
	0xe3, 0x77, 0xcf, 0x54, 0x74, 0xa7, 0x14, 0xcf, 0xe8, 0xc1, 0x49, 0xa6, 0x7f, 0xb5, 0xa1, 0xbb,
	0x14, 0x8c, 0x89, 0x6c, 0x8b, 0xbe, 0x82, 0x80, 0x16, 0x32, 0x29, 0xb5, 0x22, 0x9a, 0x6f, 0x0f,
	0x91, 0x37, 0xf1, 0x66, 0xfe, 0xe2, 0x66, 0x6e, 0x7c, 0xf3, 0x4a, 0x34, 0x5f, 0x15, 0xf2, 0x45,
	0x25, 0xc0, 0x3e, 0x6d, 0x0a, 0xe7, 0xa6, 0x8d, 0xbb, 0xf5, 0x7a, 0x37, 0x3d, 0x75, 0x1f, 0x0b,
	0xf4, 0x0d, 0x0c, 0xe9, 0xae, 0xd4, 0xf9, 0xc9, 0xf1, 0x6d, 0xdb, 0xe0, 0xe1, 0x3f, 0x1a, 0x58,
	0xd1, 0xb1, 0xc7, 0x80, 0x9e, 0xd5, 0xe8, 0x0e, 0x7a, 0xf5, 0x80, 0x51, 0x67, 0xe2, 0xcd, 0x06,
	0x8b, 0x37, 0x9c, 0x7f, 0x55, 0x8f, 0xbd, 0xca, 0x19, 0xc7, 0x47, 0x11, 0x9a, 0xc1, 0x68, 0x2d,
	0x58, 0x52, 0x28, 0x41, 0x79, 0x22, 0x05, 0x55, 0x79, 0x19, 0x5d, 0x4d, 0xbc, 0x59, 0x1b, 0x0f,
	0xd6, 0x82, 0x3d, 0x37, 0xf0, 0x0f, 0x16, 0x1d, 0x7f, 0x06, 0xfe, 0xc9, 0xec, 0xe8, 0x43, 0x18,
	0x6e, 0x52, 0xa2, 0x13, 0xe3, 0xae, 0x7c, 0x9e, 0xf5, 0x85, 0x06, 0x5e, 0x0a, 0x56, 0xd9, 0x88,
	0xb1, 0x35, 0x73, 0xde, 0xc2, 0x40, 0x92, 0xfb, 0x4b, 0x57, 0x20, 0xc9, 0xfd, 0xd1, 0x84, 0x3e,
	0x06, 0xc4, 0xcd, 0x63, 0x6a, 0xa2, 0xb6, 0x5c, 0xd7, 0xca, 0x96, 0x55, 0x8e, 0x0c, 0xf3, 0xd2,
	0x12, 0xd5, 0x11, 0x7f, 0x78, 0x30, 0x38, 0x7f, 0x17, 0x84, 0xa0, 0x9d, 0x11, 0xc9, 0x6d, 0xf3,
	0x3e, 0xb6, 0xdf, 0xe8, 0x3b, 0x08, 0xab, 0x27, 0x2e, 0x88, 0x22, 0xd2, 0xf4, 0xbb, 0x9a, 0xf9,
	0x8b, 0xc7, 0xff, 0xf5, 0xc0, 0xf3, 0xe7, 0x56, 0x8a, 0x03, 0xe7, 0x74, 0xd5, 0xf8, 0x13, 0xb8,
	0x76, 0x5f, 0x68, 0x04, 0x57, 0x3f, 0xf3, 0x43, 0x75, 0x8c, 0xf9, 0x44, 0x6f, 0x42, 0x67, 0x4f,
	0xd2, 0x1d, 0xb7, 0xb7, 0xed, 0x63, 0x57, 0x4c, 0x3f, 0x35, 0x0e, 0x6a, 0x42, 0xf6, 0x11, 0x84,
	0x05, 0xa1, 0x3c, 0x61, 0x3c, 0x15, 0x7b, 0xae, 0x9c, 0xb7, 0xf7, 0x65, 0x67, 0x43, 0xd2, 0x92,
	0xe3, 0xc0, 0x70, 0x5f, 0x57, 0xd4, 0xf4, 0xcf, 0x16, 0x3c, 0xf8, 0x56, 0xf1, 0x5f, 0x76, 0x66,
	0x55, 0x2b, 0x52, 0x94, 0x71, 0xb6, 0xc9, 0x51, 0x0c, 0xe1, 0xa6, 0x06, 0x13, 0x4a, 0x8a, 0xc8,
	0xb3, 0x73, 0xdc, 0xba, 0x39, 0x2e, 0xf4, 0x67, 0x08, 0x0e, 0x36, 0x27, 0x15, 0x7a, 0x0a, 0x03,
	0x21, 0x8b, 0x44, 0x0b, 0xc9, 0x4b, 0x4d, 0x64, 0xe1, 0xde, 0x24, 0x5c, 0xb6, 0x22, 0x0f, 0x87,
	0x42, 0x16, 0x2f, 0x8f, 0x84, 0x59, 0x49, 0x4a, 0x4a, 0x9d, 0x9c, 0xe9, 0x6d, 0x54, 0x42, 0x3c,
	0x32, 0x4c, 0x7c, 0x22, 0x1f, 0xff, 0xee, 0x41, 0x70, 0x7a, 0x2e, 0x7a, 0x02, 0x43, 0xb3, 0x77,
	0x21, 0x0b, 0xc5, 0xcb, 0x52, 0xe4, 0x99, 0x5b, 0x7c, 0x88, 0x4d, 0x1c, 0xe2, 0x06, 0x45, 0x4f,
	0x61, 0xc4, 0x76, 0x8a, 0x68, 0x91, 0x67, 0x49, 0xc9, 0x69, 0x9e, 0x31, 0xb7, 0xf8, 0x10, 0x0f,
	0x6b, 0xfc, 0x85, 0x83, 0xd1, 0x17, 0x10, 0xb9, 0x1c, 0xeb, 0x93, 0xbe, 0x09, 0xcd, 0x77, 0x99,
	0xae, 0x2e, 0xf6, 0x76, 0xc5, 0x37, 0x07, 0xac, 0x0c, 0x3b, 0xfd, 0xad, 0x0d, 0xfe, 0xb3, 0xe6,
	0xe7, 0x02, 0x4d, 0x20, 0x48, 0x45, 0xc6, 0x13, 0xa1, 0xb9, 0x4c, 0x04, 0xab, 0x32, 0x09, 0x06,
	0x8b, 0x35, 0x97, 0x31, 0x43, 0xef, 0x83, 0x4f, 0x89, 0x2c, 0x88, 0xd8, 0x66, 0x46, 0xd0, 0x71,
	0x82, 0x1a, 0x8a, 0x19, 0x7a, 0x04, 0x40, 0xa8, 0x3d, 0xdb, 0xf0, 0xd7, 0x96, 0xef, 0x57, 0x48,
	0xcc, 0xd0, 0x63, 0x08, 0x09, 0xdb, 0x73, 0xa5, 0x45, 0xc9, 0x95, 0x51, 0xf4, 0x5c, 0xec, 0x1b,
	0x30, 0x66, 0xe8, 0x73, 0x88, 0x9a, 0x6b, 0x90, 0x54, 0x73, 0x95, 0x11, 0x2d, 0xf6, 0xdc, 0xe8,
	0xfb, 0x36, 0x4e, 0x6f, 0xd5, 0x57, 0x7a, 0xd6, 0xb0, 0x31, 0x43, 0x37, 0xd0, 0x5b, 0xef, 0x5e,
	0xbd, 0x4a, 0x4c, 0x16, 0xbb, 0x56, 0xd8, 0x35, 0xf5, 0xf7, 0xfc, 0x80, 0x3e, 0x80, 0x80, 0x2a,
	0x5e, 0xb7, 0x71, 0x0b, 0x6e, 0x63, 0xbf, 0xc6, 0x62, 0x56, 0xa2, 0x27, 0xd0, 0x5d, 0xbb, 0xf4,
	0xdb, 0x67, 0xf3, 0x17, 0xe1, 0xd9, 0x9f, 0x04, 0xae, 0x59, 0x74, 0x0b, 0xd7, 0x85, 0x4d, 0x71,
	0xf5, 0xdb, 0x14, 0x38, 0x9d, 0x4b, 0x36, 0xae, 0x38, 0xf4, 0x13, 0x3c, 0x6a, 0xa6, 0x38, 0x4b,
	0x6a, 0x99, 0x88, 0x6c, 0x93, 0x47, 0x60, 0xcd, 0xef, 0xfc, 0x4b, 0x5e, 0xf1, 0x4d, 0x3d, 0xe3,
	0x65, 0xf4, 0x7f, 0x84, 0x87, 0xc7, 0x2d, 0xbc, 0xae, 0xb3, 0xff, 0x3f, 0x9d, 0x6b, 0xf3, 0x05,
	0xb5, 0x7c, 0x00, 0x43, 0x9a, 0xcb, 0x79, 0xf5, 0xaf, 0x62, 0xbe, 0x16, 0xec, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x50, 0x0c, 0xb9, 0x5e, 0x06, 0x00, 0x00,
}
