// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/logs/augmentor.proto

package logs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Stinger will issue a HTTP request to the augmentor.
// The following message will be present in the body of the HTTP request.
type AugmentorRequest struct {
	// Bid request received from the exchange after it has been processed by Beeswax.
	BidRequest       *BidRequest `protobuf:"bytes,1,opt,name=bid_request,json=bidRequest" json:"bid_request,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *AugmentorRequest) Reset()                    { *m = AugmentorRequest{} }
func (m *AugmentorRequest) String() string            { return proto.CompactTextString(m) }
func (*AugmentorRequest) ProtoMessage()               {}
func (*AugmentorRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AugmentorRequest) GetBidRequest() *BidRequest {
	if m != nil {
		return m.BidRequest
	}
	return nil
}

// Augmentor will respond to Stinger with a HTTP response.
// The following message will be present in the body of the HTTP response.
// Augmentor can choose not to bid at all in which case it must still
// respond to the HTTP request with a 204 status code.
//
// Also custom bidding agents can receive this data through the augmentor_data field in
// the BidRequestExtension.
type AugmentorResponse struct {
	// Array of Augmentor segments
	Segments         []*AugmentorResponse_Segment `protobuf:"bytes,1,rep,name=segments" json:"segments,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *AugmentorResponse) Reset()                    { *m = AugmentorResponse{} }
func (m *AugmentorResponse) String() string            { return proto.CompactTextString(m) }
func (*AugmentorResponse) ProtoMessage()               {}
func (*AugmentorResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AugmentorResponse) GetSegments() []*AugmentorResponse_Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

type AugmentorResponse_Segment struct {
	// The Id of an augmentor segment.
	// This field is primarily used for line item targeting.
	// For targeting to work with the segment ids, it is necessary
	// to register the segment ids with Beeswax via the Buzz Segments API.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// This field can be used to pass additional information about the segment
	// that Stinger will forward to the bidding agent.
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AugmentorResponse_Segment) Reset()                    { *m = AugmentorResponse_Segment{} }
func (m *AugmentorResponse_Segment) String() string            { return proto.CompactTextString(m) }
func (*AugmentorResponse_Segment) ProtoMessage()               {}
func (*AugmentorResponse_Segment) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

func (m *AugmentorResponse_Segment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *AugmentorResponse_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*AugmentorRequest)(nil), "logs.AugmentorRequest")
	proto.RegisterType((*AugmentorResponse)(nil), "logs.AugmentorResponse")
	proto.RegisterType((*AugmentorResponse_Segment)(nil), "logs.AugmentorResponse.Segment")
}

func init() { proto.RegisterFile("beeswax/logs/augmentor.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x4a, 0x4d, 0x2d,
	0x2e, 0x4f, 0xac, 0xd0, 0xcf, 0xc9, 0x4f, 0x2f, 0xd6, 0x4f, 0x2c, 0x4d, 0xcf, 0x4d, 0xcd, 0x2b,
	0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x89, 0x4a, 0x49, 0xa1, 0xa8,
	0xc9, 0x2f, 0x48, 0xcd, 0x2b, 0x2a, 0x49, 0x82, 0xa8, 0x50, 0x72, 0xe5, 0x12, 0x70, 0x84, 0x69,
	0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x32, 0xe4, 0xe2, 0x4e, 0xca, 0x4c, 0x89, 0x2f,
	0x82, 0x70, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x04, 0xf4, 0x40, 0xba, 0xf5, 0x9c, 0x32,
	0x53, 0xa0, 0xca, 0x82, 0xb8, 0x92, 0xe0, 0x6c, 0xa5, 0x46, 0x46, 0x2e, 0x41, 0x24, 0x73, 0x8a,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xac, 0xb9, 0x38, 0x8a, 0x53, 0xc1, 0x82, 0xc5, 0x12, 0x8c,
	0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0xf2, 0x10, 0x53, 0x30, 0x94, 0xea, 0x05, 0x43, 0xd4, 0x05, 0xc1,
	0x35, 0x48, 0xe9, 0x73, 0xb1, 0x43, 0x05, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0xc0, 0xee, 0xe0,
	0x0c, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x02,
	0x0b, 0x41, 0x38, 0x4e, 0xa2, 0x5c, 0xc2, 0xc9, 0xf9, 0xb9, 0x7a, 0x50, 0xcf, 0xea, 0x41, 0xc3,
	0x02, 0x10, 0x00, 0x00, 0xff, 0xff, 0x28, 0x4c, 0x3c, 0xb1, 0x22, 0x01, 0x00, 0x00,
}
