// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/logs/request.proto

package logs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Stinger will issue a HTTP request to the bid agent.
// The following message will be present in the body of the HTTP request.
type BidAgentRequest struct {
	// Fully augmented bid request.
	BidRequest *BidRequest `protobuf:"bytes,1,opt,name=bid_request,json=bidRequest" json:"bid_request,omitempty"`
	// Adcandidate is a wrapper around a line item and creatives.
	// Stinger determines all the adcandidates that are eligible to serve for
	// the given bid request.
	Adcandidates     []*Adcandidate `protobuf:"bytes,2,rep,name=adcandidates" json:"adcandidates,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BidAgentRequest) Reset()                    { *m = BidAgentRequest{} }
func (m *BidAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*BidAgentRequest) ProtoMessage()               {}
func (*BidAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *BidAgentRequest) GetBidRequest() *BidRequest {
	if m != nil {
		return m.BidRequest
	}
	return nil
}

func (m *BidAgentRequest) GetAdcandidates() []*Adcandidate {
	if m != nil {
		return m.Adcandidates
	}
	return nil
}

// Bid agent will respond to Stinger with a HTTP response.
// The following message will be present in the body of the HTTP response.
// BidAgent can choose not to bid at all in which case it must still
// respond to the HTTP request with a 204 status code.
type BidAgentResponse struct {
	Bids             []*BidAgentResponse_Bid `protobuf:"bytes,1,rep,name=bids" json:"bids,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *BidAgentResponse) Reset()                    { *m = BidAgentResponse{} }
func (m *BidAgentResponse) String() string            { return proto.CompactTextString(m) }
func (*BidAgentResponse) ProtoMessage()               {}
func (*BidAgentResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *BidAgentResponse) GetBids() []*BidAgentResponse_Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

// AgentParams are typed <key,value> pairs denoting some custom attributes
// of the Bid agent.
// These params are logged and are available via Bid logs.
// Some use cases of AgentParams:
// - If the bidding agent uses a machine learning model, some of its
//   attributes can be passed in via AgentParams.
// Next Id: 6
type BidAgentResponse_AgentParams struct {
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Types that are valid to be assigned to ValueOneof:
	//	*BidAgentResponse_AgentParams_StringValue
	//	*BidAgentResponse_AgentParams_IntValue
	//	*BidAgentResponse_AgentParams_DoubleValue
	//	*BidAgentResponse_AgentParams_BoolValue
	ValueOneof       isBidAgentResponse_AgentParams_ValueOneof `protobuf_oneof:"value_oneof"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *BidAgentResponse_AgentParams) Reset()                    { *m = BidAgentResponse_AgentParams{} }
func (m *BidAgentResponse_AgentParams) String() string            { return proto.CompactTextString(m) }
func (*BidAgentResponse_AgentParams) ProtoMessage()               {}
func (*BidAgentResponse_AgentParams) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 0} }

type isBidAgentResponse_AgentParams_ValueOneof interface {
	isBidAgentResponse_AgentParams_ValueOneof()
}

type BidAgentResponse_AgentParams_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}
type BidAgentResponse_AgentParams_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=int_value,json=intValue,oneof"`
}
type BidAgentResponse_AgentParams_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,oneof"`
}
type BidAgentResponse_AgentParams_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"`
}

func (*BidAgentResponse_AgentParams_StringValue) isBidAgentResponse_AgentParams_ValueOneof() {}
func (*BidAgentResponse_AgentParams_IntValue) isBidAgentResponse_AgentParams_ValueOneof()    {}
func (*BidAgentResponse_AgentParams_DoubleValue) isBidAgentResponse_AgentParams_ValueOneof() {}
func (*BidAgentResponse_AgentParams_BoolValue) isBidAgentResponse_AgentParams_ValueOneof()   {}

func (m *BidAgentResponse_AgentParams) GetValueOneof() isBidAgentResponse_AgentParams_ValueOneof {
	if m != nil {
		return m.ValueOneof
	}
	return nil
}

func (m *BidAgentResponse_AgentParams) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *BidAgentResponse_AgentParams) GetStringValue() string {
	if x, ok := m.GetValueOneof().(*BidAgentResponse_AgentParams_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *BidAgentResponse_AgentParams) GetIntValue() int32 {
	if x, ok := m.GetValueOneof().(*BidAgentResponse_AgentParams_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *BidAgentResponse_AgentParams) GetDoubleValue() float64 {
	if x, ok := m.GetValueOneof().(*BidAgentResponse_AgentParams_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *BidAgentResponse_AgentParams) GetBoolValue() bool {
	if x, ok := m.GetValueOneof().(*BidAgentResponse_AgentParams_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidAgentResponse_AgentParams) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidAgentResponse_AgentParams_OneofMarshaler, _BidAgentResponse_AgentParams_OneofUnmarshaler, _BidAgentResponse_AgentParams_OneofSizer, []interface{}{
		(*BidAgentResponse_AgentParams_StringValue)(nil),
		(*BidAgentResponse_AgentParams_IntValue)(nil),
		(*BidAgentResponse_AgentParams_DoubleValue)(nil),
		(*BidAgentResponse_AgentParams_BoolValue)(nil),
	}
}

func _BidAgentResponse_AgentParams_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidAgentResponse_AgentParams)
	// value_oneof
	switch x := m.ValueOneof.(type) {
	case *BidAgentResponse_AgentParams_StringValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *BidAgentResponse_AgentParams_IntValue:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *BidAgentResponse_AgentParams_DoubleValue:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *BidAgentResponse_AgentParams_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("BidAgentResponse_AgentParams.ValueOneof has unexpected type %T", x)
	}
	return nil
}

func _BidAgentResponse_AgentParams_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidAgentResponse_AgentParams)
	switch tag {
	case 2: // value_oneof.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueOneof = &BidAgentResponse_AgentParams_StringValue{x}
		return true, err
	case 3: // value_oneof.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueOneof = &BidAgentResponse_AgentParams_IntValue{int32(x)}
		return true, err
	case 4: // value_oneof.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueOneof = &BidAgentResponse_AgentParams_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 5: // value_oneof.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueOneof = &BidAgentResponse_AgentParams_BoolValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _BidAgentResponse_AgentParams_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidAgentResponse_AgentParams)
	// value_oneof
	switch x := m.ValueOneof.(type) {
	case *BidAgentResponse_AgentParams_StringValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *BidAgentResponse_AgentParams_IntValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *BidAgentResponse_AgentParams_DoubleValue:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *BidAgentResponse_AgentParams_BoolValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Next Id: 3
// AgentData is a container for the AgentParams (defined above) and an
// identifier for the Agent.
// A use case for agent_id could be the release version of the Bid Agent.
type BidAgentResponse_AgentData struct {
	AgentId          *string                         `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentParams      []*BidAgentResponse_AgentParams `protobuf:"bytes,2,rep,name=agent_params,json=agentParams" json:"agent_params,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *BidAgentResponse_AgentData) Reset()                    { *m = BidAgentResponse_AgentData{} }
func (m *BidAgentResponse_AgentData) String() string            { return proto.CompactTextString(m) }
func (*BidAgentResponse_AgentData) ProtoMessage()               {}
func (*BidAgentResponse_AgentData) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 1} }

func (m *BidAgentResponse_AgentData) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *BidAgentResponse_AgentData) GetAgentParams() []*BidAgentResponse_AgentParams {
	if m != nil {
		return m.AgentParams
	}
	return nil
}

// Next Id: 5
// Creative represents the creative to be rendered in the openrtb bid
// response.
type BidAgentResponse_Creative struct {
	// The id of the chosen creative. It should be one of the ids in
	// creative_ids where the Adcandidate's line_item_id ==
	// Bid.line_item_id for the Bid containing this Creative message,
	// otherwise the bid will not be processed.
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pixels that will be fired when the creative is served in addition
	// to the `pixels` field, which is set in `creative` object from buzz.
	// (see http://docs.beeswax.com/docs/creative)
	// This field should not be populated when the battr field has
	// AD_SUPPORTS_DYNAMIC_PIXELS(108), otherwise this bid will not be
	// processed.
	// battr field is under BidAgentRequest.bid_request.imp.(banner/video).battr
	// ; whether it is banner or video corresponds to the type of this creative.
	Pixels []string `protobuf:"bytes,2,rep,name=pixels" json:"pixels,omitempty"`
	// The `creative` object's `click_url` field, which is set from buzz,
	// will be replaced with this value if it is present.
	// (see http://docs.beeswax.com/docs/creative)
	// This field should not be populated when the battr field has
	// AD_SUPPORTS_DYNAMIC_CLICK_URL(109), otherwise this bid will not be
	// processed.
	// battr field is under BidAgentRequest.bid_request.imp.(banner/video).battr
	// ; whether it is banner or video corresponds to the type of this creative.
	ClickUrlOverride *string                            `protobuf:"bytes,3,opt,name=click_url_override,json=clickUrlOverride" json:"click_url_override,omitempty"`
	DynamicMacros    []*BidAgentResponse_Creative_Macro `protobuf:"bytes,4,rep,name=dynamic_macros,json=dynamicMacros" json:"dynamic_macros,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *BidAgentResponse_Creative) Reset()                    { *m = BidAgentResponse_Creative{} }
func (m *BidAgentResponse_Creative) String() string            { return proto.CompactTextString(m) }
func (*BidAgentResponse_Creative) ProtoMessage()               {}
func (*BidAgentResponse_Creative) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 2} }

func (m *BidAgentResponse_Creative) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BidAgentResponse_Creative) GetPixels() []string {
	if m != nil {
		return m.Pixels
	}
	return nil
}

func (m *BidAgentResponse_Creative) GetClickUrlOverride() string {
	if m != nil && m.ClickUrlOverride != nil {
		return *m.ClickUrlOverride
	}
	return ""
}

func (m *BidAgentResponse_Creative) GetDynamicMacros() []*BidAgentResponse_Creative_Macro {
	if m != nil {
		return m.DynamicMacros
	}
	return nil
}

// The creative's macros {{DYNAMIC:<name>:STRING}} in the value of a
// creative content or creative template, will be replaced with the
// content of `value`.
// For example, if name = "foo", value = "bar", the macro
// {{DYNAMIC:FOO:STRING}} will be replaced with "bar".
//
// Please note the following constraints:
// (1) Macro expansion will only apply to the creative of the same id as
// this containing creative object.
// (2) Macro name is case-insensitive. (if name = "foo",
// the macro {{DYNAMIC:FOO:STRING}} will still be replaced)
// (3) Beeswax will pick up the first 5 dynamic macros. Additional ones will
// be ignored.
// (4) For a macro to be expanded as an empty string, you should
// explicitly set the macro name in the `name` field, and leave the
// `value` feild empty; Dynamic macros in creatives that does
// not have a match from the `name` field here will not be expanded.
// (5) If a dynamic macro was not expanded, a string of {{DY:<name>}}
// (instead of {{DYNAMIC:<name>:STRING}}) will be placed at where the
// {{DYNAMIC:<name>:STRING}} macro was placed.
// (6) Values of dynamic macros cannot contain other Beeswax macros,
// (including other dynamic macros), as the contained macros will
// not be expanded.
// (7) If the macro is part of a url, the value shold be url-safe
// (e.g, by escaping). Note that click_url is properly escaped as a whole,
// so if the macro is in click_url, its value does not need to
// have extra escaping; url-safe is enough.
//
type BidAgentResponse_Creative_Macro struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BidAgentResponse_Creative_Macro) Reset()         { *m = BidAgentResponse_Creative_Macro{} }
func (m *BidAgentResponse_Creative_Macro) String() string { return proto.CompactTextString(m) }
func (*BidAgentResponse_Creative_Macro) ProtoMessage()    {}
func (*BidAgentResponse_Creative_Macro) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{1, 2, 0}
}

func (m *BidAgentResponse_Creative_Macro) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidAgentResponse_Creative_Macro) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Bid agent needs to select a set of Adcandidates from the request
// and for each Adcandidate, submit a bid containing the following
// information.
type BidAgentResponse_Bid struct {
	LineItemId *uint64 `protobuf:"varint,1,opt,name=line_item_id,json=lineItemId" json:"line_item_id,omitempty"`
	// Deprecated, use bid_price_micros instead.
	// (1) Beeswax will do validation (see (2)) and use this value only if
	// bid_price_micros is not populated.
	// (2) Validation: The adcandidate with this line_item_id in the
	// BidAgentRequest must have bidding.currency set to USD;
	// otherwise this bid will be dropped.
	BidPriceMicrosUsd *uint64                     `protobuf:"varint,2,opt,name=bid_price_micros_usd,json=bidPriceMicrosUsd,def=0" json:"bid_price_micros_usd,omitempty"`
	BidPriceMicros    *uint64                     `protobuf:"varint,6,opt,name=bid_price_micros,json=bidPriceMicros,def=0" json:"bid_price_micros,omitempty"`
	CreativeId        *uint64                     `protobuf:"varint,3,opt,name=creative_id,json=creativeId" json:"creative_id,omitempty"`
	Creative          *BidAgentResponse_Creative  `protobuf:"bytes,5,opt,name=creative" json:"creative,omitempty"`
	AgentData         *BidAgentResponse_AgentData `protobuf:"bytes,4,opt,name=agent_data,json=agentData" json:"agent_data,omitempty"`
	XXX_unrecognized  []byte                      `json:"-"`
}

func (m *BidAgentResponse_Bid) Reset()                    { *m = BidAgentResponse_Bid{} }
func (m *BidAgentResponse_Bid) String() string            { return proto.CompactTextString(m) }
func (*BidAgentResponse_Bid) ProtoMessage()               {}
func (*BidAgentResponse_Bid) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 3} }

const Default_BidAgentResponse_Bid_BidPriceMicrosUsd uint64 = 0
const Default_BidAgentResponse_Bid_BidPriceMicros uint64 = 0

func (m *BidAgentResponse_Bid) GetLineItemId() uint64 {
	if m != nil && m.LineItemId != nil {
		return *m.LineItemId
	}
	return 0
}

func (m *BidAgentResponse_Bid) GetBidPriceMicrosUsd() uint64 {
	if m != nil && m.BidPriceMicrosUsd != nil {
		return *m.BidPriceMicrosUsd
	}
	return Default_BidAgentResponse_Bid_BidPriceMicrosUsd
}

func (m *BidAgentResponse_Bid) GetBidPriceMicros() uint64 {
	if m != nil && m.BidPriceMicros != nil {
		return *m.BidPriceMicros
	}
	return Default_BidAgentResponse_Bid_BidPriceMicros
}

func (m *BidAgentResponse_Bid) GetCreativeId() uint64 {
	if m != nil && m.CreativeId != nil {
		return *m.CreativeId
	}
	return 0
}

func (m *BidAgentResponse_Bid) GetCreative() *BidAgentResponse_Creative {
	if m != nil {
		return m.Creative
	}
	return nil
}

func (m *BidAgentResponse_Bid) GetAgentData() *BidAgentResponse_AgentData {
	if m != nil {
		return m.AgentData
	}
	return nil
}

func init() {
	proto.RegisterType((*BidAgentRequest)(nil), "logs.BidAgentRequest")
	proto.RegisterType((*BidAgentResponse)(nil), "logs.BidAgentResponse")
	proto.RegisterType((*BidAgentResponse_AgentParams)(nil), "logs.BidAgentResponse.AgentParams")
	proto.RegisterType((*BidAgentResponse_AgentData)(nil), "logs.BidAgentResponse.AgentData")
	proto.RegisterType((*BidAgentResponse_Creative)(nil), "logs.BidAgentResponse.Creative")
	proto.RegisterType((*BidAgentResponse_Creative_Macro)(nil), "logs.BidAgentResponse.Creative.Macro")
	proto.RegisterType((*BidAgentResponse_Bid)(nil), "logs.BidAgentResponse.Bid")
}

func init() { proto.RegisterFile("beeswax/logs/request.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0x4f, 0x6b, 0xdb, 0x4e,
	0x10, 0x8d, 0x6c, 0x39, 0xb1, 0x46, 0x4e, 0xe2, 0x2c, 0xe1, 0x87, 0x7e, 0x82, 0x36, 0x22, 0xa1,
	0x60, 0x68, 0x51, 0x1a, 0x43, 0x7b, 0x68, 0x0f, 0x25, 0x6e, 0x0b, 0x31, 0x34, 0x34, 0x2c, 0xa4,
	0x57, 0xb1, 0xd2, 0x6e, 0xc3, 0x12, 0x49, 0xeb, 0xee, 0xae, 0xd3, 0x84, 0xde, 0xfa, 0x85, 0x7a,
	0xed, 0xd7, 0xe9, 0x37, 0x29, 0xfb, 0xc7, 0x8e, 0x5d, 0x48, 0x7b, 0x9b, 0x79, 0xef, 0xcd, 0xcc,
	0xdb, 0xd1, 0x20, 0x48, 0x4b, 0xc6, 0xd4, 0x57, 0x72, 0x7b, 0x5c, 0x8b, 0x2b, 0x75, 0x2c, 0xd9,
	0x97, 0x39, 0x53, 0x3a, 0x9f, 0x49, 0xa1, 0x05, 0x0a, 0x0d, 0x96, 0x3e, 0x5e, 0x53, 0x10, 0x5a,
	0x91, 0x96, 0x72, 0x4a, 0x34, 0x73, 0xaa, 0x74, 0xbd, 0x83, 0x98, 0xb1, 0x56, 0xea, 0xd2, 0x71,
	0x87, 0xdf, 0x60, 0x77, 0xc2, 0xe9, 0xe9, 0x15, 0x6b, 0x35, 0x76, 0xad, 0xd1, 0x09, 0xc4, 0x25,
	0xa7, 0x85, 0x9f, 0x94, 0x04, 0x59, 0x30, 0x8a, 0xc7, 0xc3, 0xdc, 0x14, 0xe7, 0x13, 0x4e, 0xbd,
	0x0c, 0x43, 0xb9, 0x8c, 0xd1, 0x0b, 0x18, 0xac, 0x8c, 0x55, 0x49, 0x27, 0xeb, 0x8e, 0xe2, 0xf1,
	0x9e, 0xab, 0x39, 0xbd, 0x67, 0xf0, 0x9a, 0xec, 0xf0, 0xfb, 0x16, 0x0c, 0xef, 0xa7, 0xab, 0x99,
	0x68, 0x15, 0x43, 0x39, 0x84, 0x25, 0xa7, 0x2a, 0x09, 0x6c, 0x8f, 0x74, 0x39, 0x77, 0x4d, 0x65,
	0x8d, 0x58, 0x5d, 0xfa, 0x33, 0x80, 0xd8, 0x72, 0x17, 0x44, 0x92, 0x46, 0xa1, 0x21, 0x74, 0xaf,
	0xd9, 0x9d, 0xb5, 0x1d, 0x61, 0x13, 0xa2, 0x23, 0x18, 0x28, 0x2d, 0x79, 0x7b, 0x55, 0xdc, 0x90,
	0x7a, 0xce, 0x92, 0x8e, 0xa1, 0xce, 0x36, 0x70, 0xec, 0xd0, 0x4f, 0x06, 0x44, 0x8f, 0x20, 0xe2,
	0xad, 0xf6, 0x8a, 0x6e, 0x16, 0x8c, 0x7a, 0x67, 0x1b, 0xb8, 0xcf, 0x5b, 0xed, 0xe8, 0x23, 0x18,
	0x50, 0x31, 0x2f, 0x6b, 0xe6, 0x15, 0x61, 0x16, 0x8c, 0x02, 0xd3, 0xc3, 0xa1, 0x4e, 0x74, 0x00,
	0x50, 0x0a, 0x51, 0x7b, 0x49, 0x2f, 0x0b, 0x46, 0xfd, 0xb3, 0x0d, 0x1c, 0x19, 0xcc, 0x0a, 0x26,
	0xdb, 0x10, 0x5b, 0xae, 0x10, 0x2d, 0x13, 0x9f, 0xd3, 0x06, 0x22, 0xeb, 0xfc, 0x1d, 0xd1, 0x04,
	0xfd, 0x0f, 0x7d, 0x62, 0x92, 0x82, 0x53, 0x6f, 0x7e, 0xcb, 0xe6, 0x53, 0x8a, 0xde, 0xc3, 0xc0,
	0x51, 0x33, 0xfb, 0x44, 0xbf, 0xde, 0xc3, 0x07, 0x56, 0xb3, 0xb2, 0x0c, 0x1c, 0x93, 0xfb, 0x24,
	0xfd, 0x15, 0x40, 0xff, 0xad, 0x64, 0x44, 0xf3, 0x1b, 0x86, 0x76, 0xa0, 0xe3, 0x07, 0x85, 0xb8,
	0xc3, 0x29, 0xfa, 0x0f, 0x36, 0x67, 0xfc, 0x96, 0xd5, 0xae, 0x7b, 0x84, 0x7d, 0x86, 0x9e, 0x01,
	0xaa, 0x6a, 0x5e, 0x5d, 0x17, 0x73, 0x59, 0x17, 0xe2, 0x86, 0x49, 0xc9, 0xa9, 0x5b, 0x50, 0x84,
	0x87, 0x96, 0xb9, 0x94, 0xf5, 0x47, 0x8f, 0xa3, 0x0f, 0xb0, 0x43, 0xef, 0x5a, 0xd2, 0xf0, 0xaa,
	0x68, 0x48, 0x25, 0x85, 0x4a, 0x42, 0xeb, 0xf5, 0xc9, 0x03, 0x5e, 0x17, 0x76, 0xf2, 0x73, 0xa3,
	0xc6, 0xdb, 0xbe, 0xd8, 0x66, 0x2a, 0x3d, 0x81, 0x9e, 0x8d, 0x10, 0x82, 0xb0, 0x25, 0x0d, 0xf3,
	0x7b, 0xb1, 0x31, 0xda, 0x87, 0xde, 0xca, 0xe7, 0xc4, 0x2e, 0x49, 0x7f, 0x74, 0xa0, 0x3b, 0xe1,
	0x14, 0x65, 0x30, 0xa8, 0x79, 0xcb, 0x0a, 0xae, 0x59, 0x53, 0x2c, 0x1f, 0x0a, 0x06, 0x9b, 0x6a,
	0xd6, 0x4c, 0x29, 0x7a, 0x09, 0xfb, 0xe6, 0xcc, 0x67, 0x92, 0x57, 0xac, 0x68, 0xb8, 0x19, 0x58,
	0xcc, 0x15, 0xb5, 0xed, 0xc2, 0x57, 0xc1, 0xf3, 0x49, 0x27, 0x09, 0xf0, 0x5e, 0xc9, 0xe9, 0x85,
	0x51, 0x9c, 0x5b, 0xc1, 0xa5, 0xa2, 0xe8, 0x29, 0x0c, 0xff, 0xac, 0x4b, 0x36, 0x7d, 0x0d, 0xde,
	0x59, 0xd7, 0xa3, 0x23, 0x88, 0x2b, 0xff, 0x44, 0xe3, 0xc2, 0xac, 0x2d, 0xb4, 0x8d, 0x61, 0x01,
	0x4f, 0x29, 0x7a, 0x0d, 0xfd, 0x45, 0x66, 0x8f, 0x26, 0x1e, 0x1f, 0xfc, 0x63, 0x5d, 0x78, 0x59,
	0x80, 0xde, 0x00, 0xb8, 0xdb, 0xa0, 0x44, 0x13, 0x7b, 0x96, 0xf1, 0x38, 0xfb, 0xdb, 0x65, 0x98,
	0x63, 0xc3, 0x11, 0x59, 0x84, 0x93, 0x3d, 0xd8, 0xad, 0x44, 0x93, 0xfb, 0x7f, 0x44, 0x5e, 0x72,
	0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xa8, 0xb4, 0xb8, 0x73, 0x04, 0x00, 0x00,
}
