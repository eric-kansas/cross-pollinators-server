// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beeswax/logs/currency.proto

package logs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Currency_Code int32

const (
	Currency_UNKNOWN Currency_Code = 0
	Currency_USD     Currency_Code = 1
	Currency_EUR     Currency_Code = 2
	Currency_GBP     Currency_Code = 3
	Currency_CAD     Currency_Code = 4
	Currency_CHF     Currency_Code = 5
)

var Currency_Code_name = map[int32]string{
	0: "UNKNOWN",
	1: "USD",
	2: "EUR",
	3: "GBP",
	4: "CAD",
	5: "CHF",
}
var Currency_Code_value = map[string]int32{
	"UNKNOWN": 0,
	"USD":     1,
	"EUR":     2,
	"GBP":     3,
	"CAD":     4,
	"CHF":     5,
}

func (x Currency_Code) String() string {
	return proto.EnumName(Currency_Code_name, int32(x))
}
func (Currency_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type Currency struct {
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// Next id: 3
type ExchangeRateUSD struct {
	CurrencyCode Currency_Code `protobuf:"varint,1,opt,name=currency_code,json=currencyCode,enum=logs.Currency_Code" json:"currency_code,omitempty"`
	Rate         float64       `protobuf:"fixed64,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *ExchangeRateUSD) Reset()                    { *m = ExchangeRateUSD{} }
func (m *ExchangeRateUSD) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRateUSD) ProtoMessage()               {}
func (*ExchangeRateUSD) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ExchangeRateUSD) GetCurrencyCode() Currency_Code {
	if m != nil {
		return m.CurrencyCode
	}
	return Currency_UNKNOWN
}

func (m *ExchangeRateUSD) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// Next id: 2
type CurrencyExchangeRateUSDTable struct {
	Rates []*ExchangeRateUSD `protobuf:"bytes,1,rep,name=rates" json:"rates,omitempty"`
}

func (m *CurrencyExchangeRateUSDTable) Reset()                    { *m = CurrencyExchangeRateUSDTable{} }
func (m *CurrencyExchangeRateUSDTable) String() string            { return proto.CompactTextString(m) }
func (*CurrencyExchangeRateUSDTable) ProtoMessage()               {}
func (*CurrencyExchangeRateUSDTable) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CurrencyExchangeRateUSDTable) GetRates() []*ExchangeRateUSD {
	if m != nil {
		return m.Rates
	}
	return nil
}

// Next id: 3
// CurrencyAmount represents an amount of money in a local currency (micros).
type CurrencyAmount struct {
	// how much money
	Micros int64 `protobuf:"varint,1,opt,name=micros" json:"micros,omitempty"`
	// in what unit
	Currency Currency_Code `protobuf:"varint,2,opt,name=currency,enum=logs.Currency_Code" json:"currency,omitempty"`
}

func (m *CurrencyAmount) Reset()                    { *m = CurrencyAmount{} }
func (m *CurrencyAmount) String() string            { return proto.CompactTextString(m) }
func (*CurrencyAmount) ProtoMessage()               {}
func (*CurrencyAmount) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *CurrencyAmount) GetMicros() int64 {
	if m != nil {
		return m.Micros
	}
	return 0
}

func (m *CurrencyAmount) GetCurrency() Currency_Code {
	if m != nil {
		return m.Currency
	}
	return Currency_UNKNOWN
}

// Next id: 3
// CurrencyTransaction represents an amount of
// currency at a particular exchange rate.
type CurrencyTransaction struct {
	// how much money
	Amount *CurrencyAmount `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	// exchange rate in effect at time of transaction
	Rate float64 `protobuf:"fixed64,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *CurrencyTransaction) Reset()                    { *m = CurrencyTransaction{} }
func (m *CurrencyTransaction) String() string            { return proto.CompactTextString(m) }
func (*CurrencyTransaction) ProtoMessage()               {}
func (*CurrencyTransaction) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *CurrencyTransaction) GetAmount() *CurrencyAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *CurrencyTransaction) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func init() {
	proto.RegisterType((*Currency)(nil), "logs.Currency")
	proto.RegisterType((*ExchangeRateUSD)(nil), "logs.ExchangeRateUSD")
	proto.RegisterType((*CurrencyExchangeRateUSDTable)(nil), "logs.CurrencyExchangeRateUSDTable")
	proto.RegisterType((*CurrencyAmount)(nil), "logs.CurrencyAmount")
	proto.RegisterType((*CurrencyTransaction)(nil), "logs.CurrencyTransaction")
	proto.RegisterEnum("logs.Currency_Code", Currency_Code_name, Currency_Code_value)
}

func init() { proto.RegisterFile("beeswax/logs/currency.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xdd, 0x4b, 0x42, 0x31,
	0x18, 0xc6, 0x3b, 0x9e, 0xe3, 0x07, 0xaf, 0x65, 0x63, 0x56, 0x08, 0x75, 0x21, 0xbb, 0x12, 0x8a,
	0x09, 0x76, 0xd3, 0x65, 0x7e, 0x55, 0x60, 0x58, 0x4c, 0x0f, 0xd2, 0x95, 0xec, 0xcc, 0x61, 0x82,
	0x9e, 0xc5, 0x76, 0x24, 0xfb, 0xef, 0x63, 0xf3, 0x2c, 0x48, 0xea, 0xee, 0xd9, 0xbb, 0x67, 0xcf,
	0xef, 0x61, 0x2f, 0x5c, 0x26, 0x52, 0x9a, 0x4f, 0xbe, 0x6b, 0xaf, 0xd5, 0xd2, 0xb4, 0xc5, 0x56,
	0x6b, 0x99, 0x8a, 0x2f, 0xfa, 0xa1, 0x55, 0xa6, 0x70, 0x64, 0x87, 0xe4, 0x19, 0x2a, 0xfd, 0x7c,
	0x4e, 0xee, 0x21, 0xea, 0xab, 0x85, 0xc4, 0x55, 0x28, 0xc7, 0xe3, 0xd1, 0xf8, 0x65, 0x36, 0x46,
	0x47, 0xb8, 0x0c, 0x61, 0x3c, 0x19, 0xa0, 0xc0, 0x8a, 0x61, 0xcc, 0x50, 0xc1, 0x8a, 0xc7, 0xde,
	0x2b, 0x0a, 0xad, 0xe8, 0x77, 0x07, 0x28, 0x72, 0xe2, 0xe9, 0x01, 0x15, 0xc9, 0x1c, 0x4e, 0x87,
	0x3b, 0xf1, 0xce, 0xd3, 0xa5, 0x64, 0x3c, 0x93, 0xf1, 0x64, 0x80, 0xef, 0xe0, 0xc4, 0x83, 0xe7,
	0x42, 0x2d, 0x64, 0x23, 0x68, 0x06, 0xad, 0x5a, 0xa7, 0x4e, 0x2d, 0x9e, 0x7a, 0x36, 0xb5, 0x60,
	0x76, 0xec, 0x9d, 0xae, 0x06, 0x86, 0x48, 0xf3, 0x4c, 0x36, 0x0a, 0xcd, 0xa0, 0x15, 0x30, 0xa7,
	0xc9, 0x08, 0xae, 0xfc, 0x93, 0x03, 0xd0, 0x94, 0x27, 0x6b, 0x89, 0xaf, 0xa1, 0x68, 0x7d, 0xa6,
	0x11, 0x34, 0xc3, 0x56, 0xb5, 0x73, 0xbe, 0xa7, 0x1c, 0x58, 0xd9, 0xde, 0x43, 0xde, 0xa0, 0xe6,
	0xc3, 0xba, 0x1b, 0xb5, 0x4d, 0x33, 0x7c, 0x01, 0xa5, 0xcd, 0x4a, 0x68, 0x65, 0x5c, 0xcb, 0x90,
	0xe5, 0x27, 0xdc, 0x86, 0x8a, 0xaf, 0xe6, 0xea, 0xfc, 0xd3, 0xff, 0xc7, 0x44, 0x66, 0x50, 0xf7,
	0x57, 0x53, 0xcd, 0x53, 0xc3, 0x45, 0xb6, 0x52, 0x29, 0xbe, 0x81, 0x12, 0x77, 0x24, 0x97, 0x5f,
	0xed, 0x9c, 0xfd, 0x4e, 0xd9, 0xb7, 0x60, 0xb9, 0xe7, 0xaf, 0x0f, 0xe8, 0x61, 0x40, 0x42, 0x6d,
	0x68, 0xbe, 0x58, 0x9a, 0x70, 0x23, 0x93, 0x92, 0x5b, 0xe8, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0x7f, 0x34, 0x0a, 0xef, 0x01, 0x00, 0x00,
}
